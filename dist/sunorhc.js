/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Sunorhc"] = factory();
	else
		root["Sunorhc"] = factory();
})(this, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/defaults.js":
/*!*************************!*\
  !*** ./src/defaults.js ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  /**\r\n   * Sunorhc.js - Library for JavaScript to handle the datetime with the Epoch time conversion method starting\r\n   *              from the CE of the Gregorian calendar.\r\n   * @package sunorhc\r\n   */\n  version: '0.1.0',\n\n  /**\r\n   * Default TimeZone\r\n   *\r\n   * @type {string} - Either \"UTC\" or \"local\" only\r\n   */\n  timezone: 'UTC',\n\n  /**\r\n   * TZ database name\r\n   *\r\n   * @type {string}\r\n   */\n  tzName: '',\n\n  /**\r\n   * The identification unit of the first numeric argument given to the constructor\r\n   *\r\n   * @type {string} - Either \"year\" or \"epoch\" only\r\n   */\n  firstArgument: 'year',\n\n  /**\r\n   * The locale used instead of browser system locale when retrieve locale date/time string\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale\r\n   * @type {string} - Depend on the Intl.Locale constructor that is a standard built-in property\r\n   */\n  locale: 'en-US',\n\n  /**\r\n   * Unit for retrieving epoch times\r\n   *\r\n   * @type {string} - Either seconds or milliseconds is allowed at unit\r\n   */\n  epochUnit: 'second',\n\n  /**\r\n   * Options for the `Date.prototype.toLocaleDateString()` method\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\r\n   * @typedef {object} LocaleFormats\r\n   * @property {string|object} common\r\n   * @property {string|object} year\r\n   * @property {string|object} month\r\n   * @property {string|object} day\r\n   * @property {string|object} weekday\r\n   * @property {string|object} hour\r\n   * @property {string|object} minute\r\n   * @property {string|object} second\r\n   * @property {string|object} era\r\n   */\n  localeFormats: {\n    common: {\n      hour12: false\n      /* calender: 'iso8601', */\n\n    },\n    year: {\n      year: 'numeric'\n    },\n    month: {\n      month: 'numeric'\n    },\n    day: {\n      day: 'numeric'\n    },\n    weekday: {\n      weekday: 'long'\n    },\n    hour: {\n      hour: 'numeric'\n      /* hour12: false, */\n\n    },\n    minute: {\n      minute: '2-digit'\n    },\n    second: {\n      second: '2-digit'\n    },\n    era: {\n      era: 'long'\n    }\n  }\n});\n\n//# sourceURL=webpack://Sunorhc/./src/defaults.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Sunorhc; }\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\n/* harmony import */ var _defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaults */ \"./src/defaults.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\nvar REGEX_PARSE = /^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/;\nvar REGEX_UNITS = /^((year|month|week|day|hour|minute|second|millisecond)s?|min|sec|ms)$/i;\nvar INVALID_DATE = 'Invalid Date';\nvar MS_A_SECOND = 1000;\nvar MS_A_MINUTE = MS_A_SECOND * 60;\nvar MS_A_HOUR = MS_A_MINUTE * 60;\nvar MS_A_DAY = MS_A_HOUR * 24;\nvar MS_A_WEEK = MS_A_DAY * 7;\nvar MIN_MONTH_DAYS = 28;\nvar AVG_MONTH_DAYS = Math.round((365 + 366) / 24 * 1000) / 1000;\nvar MIN_YEAR_DAYS = 365;\nvar AVG_YEAR_DAYS = (365 * 3 + 366) / 4;\n\nvar BI = function BI(value) {\n  return __webpack_require__.g.BigInt(value);\n};\n\nvar wrapper = function wrapper() {\n  try {\n    for (var _len = arguments.length, payloads = new Array(_len), _key = 0; _key < _len; _key++) {\n      payloads[_key] = arguments[_key];\n    }\n\n    return _construct(Sunorhc, payloads);\n  } catch (e) {\n    return INVALID_DATE;\n  }\n};\n\nvar Sunorhc = /*#__PURE__*/function () {\n  /**\r\n   * Construct Sunorhc\r\n   *\r\n   * @param {?(number|string|object)} year|date - valid 1st argument as payloads\r\n   * @param {?number} month                     - valid 2nd argument as payloads (allowed numeric are 1~12)\r\n   * @param {?number} day                       - valid 3rd argument as payloads\r\n   * @param {?number} hour                      - valid 4th argument as payloads\r\n   * @param {?number} minute                    - valid 5th argument as payloads\r\n   * @param {?number} second                    - valid 6th argument as payloads\r\n   * @param {?number} millisecond               - valid 7th argument as payloads (allowed numeric are 0~999)\r\n   * @param {?(string|object)} timezone|options [timezone=UTC] - last argument as payloads\r\n   */\n  function Sunorhc() {\n    _classCallCheck(this, Sunorhc);\n\n    // Initialize plugin configuration\n    this.config = _utils__WEBPACK_IMPORTED_MODULE_0__.default.deepMerge({}, _defaults__WEBPACK_IMPORTED_MODULE_1__.default); //console.log(utils.cloneObject(this.config))\n    // Parse payloads\n\n    for (var _len2 = arguments.length, payloads = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      payloads[_key2] = arguments[_key2];\n    }\n\n    this.parse(payloads);\n    this.init();\n    return this;\n  }\n  /**\r\n   * Parse payloads\r\n   *\r\n   * @param {array} payloads\r\n   */\n\n\n  _createClass(Sunorhc, [{\n    key: \"parse\",\n    value: function parse(payloads) {\n      var _this = this;\n\n      var keys = ['year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\n      var _now = new Date(); // today\n\n\n      this.config.offset = _now.getTimezoneOffset() * 60000; // an unit is milliseconds\n\n      this.config.dateArgs = {\n        year: _now.getFullYear(),\n        month: _now.getMonth(),\n        day: _now.getDate(),\n        hour: _now.getHours(),\n        minute: _now.getMinutes(),\n        second: _now.getSeconds(),\n        millisecond: _now.getMilliseconds()\n      }; // parse payloads\n\n      if (Array.isArray(payloads) && payloads.length > 0) {\n        if (typeof payloads[0] !== 'number') {\n          if (payloads[0] instanceof Date) {\n            // When the first argument is an instance of the Date object\n            var _dt = new Date(payloads[0]);\n\n            this.config.dateArgs = {\n              year: _dt.getFullYear(),\n              month: _dt.getMonth(),\n              day: _dt.getDate(),\n              hour: _dt.getHours(),\n              minute: _dt.getMinutes(),\n              second: _dt.getSeconds(),\n              millisecond: _dt.getMilliseconds()\n            };\n            payloads.shift();\n          } else if (typeof payloads[0] === 'string') {\n            if (/^[0-9]{1,}$/i.test(payloads[0])) {\n              // When the first argument is a numeric string\n              payloads[0] = parseInt(payloads[0], 10);\n            } else {\n              // When the first argument is a string as kind of the date\n              var d = payloads[0].match(REGEX_PARSE);\n\n              if (d) {\n                this.config.dateArgs = {\n                  year: d[1],\n                  month: d[2] - 1 || 0,\n                  day: d[3] || 1,\n                  hour: d[4] || 0,\n                  minute: d[5] || 0,\n                  second: d[6] || 0,\n                  millisecond: parseInt((d[7] || '0').substring(0, 3), 10)\n                };\n              } else {\n                var _preDt = new Date(payloads[0]);\n\n                if (this.isValid(_preDt)) {\n                  this.config.dateArgs = {\n                    year: _preDt.getFullYear(),\n                    month: _preDt.getMonth(),\n                    day: _preDt.getDate(),\n                    hour: _preDt.getHours(),\n                    minute: _preDt.getMinutes(),\n                    second: _preDt.getSeconds(),\n                    millisecond: _preDt.getMilliseconds()\n                  };\n                }\n              }\n\n              payloads.shift();\n            }\n          }\n        }\n\n        var lastElm = payloads.splice(-1, 1)[0];\n\n        if (typeof lastElm === 'number') {\n          payloads.push(lastElm);\n        } else if (typeof lastElm === 'string') {\n          lastElm = lastElm.trim();\n\n          if (/^-?\\d{1,}$/i.test(lastElm)) {\n            payloads.push(parseInt(lastElm, 10));\n          } else if (/^(utc|local)$/i.test(lastElm)) {\n            this.config.timezone = /^utc$/i.test(lastElm) ? 'UTC' : 'local';\n          } else {\n            this.config.timezone = 'local';\n          }\n        } else if (_utils__WEBPACK_IMPORTED_MODULE_0__.default.isObject(lastElm)) {\n          this.config = _utils__WEBPACK_IMPORTED_MODULE_0__.default.mergeOptions(this.config, lastElm);\n        } else {\n          //console.log('o_:', lastElm, typeof lastElm, this.config.dateArgs)\n          if (typeof lastElm !== 'undefined' && _utils__WEBPACK_IMPORTED_MODULE_0__.default.hasKey(this.config, 'dateArgs')) {\n            delete this.config.dateArgs;\n          }\n        } //console.log('!_:', lastElm, payloads.length)\n\n\n        if (payloads.length > 0) {\n          if (/^epoch$/i.test(this.config.firstArgument)) {\n            var _edt = new Date(payloads[0]);\n\n            this.config.dateArgs = {\n              year: _edt.getUTCFullYear(),\n              month: _edt.getUTCMonth(),\n              day: _edt.getUTCDate(),\n              hour: _edt.getUTCHours(),\n              minute: _edt.getUTCMinutes(),\n              second: _edt.getUTCSeconds(),\n              millisecond: _edt.getUTCMilliseconds()\n            };\n          } else {\n            var _y = typeof payloads[0] === 'number' ? payloads[0] : parseInt(String(payloads[0]), 10) || 1;\n\n            this.config.dateArgs = {\n              year: _y,\n              month: parseInt(payloads[1], 10) - 1 || 0,\n              day: parseInt(payloads[2], 10) || 1,\n              hour: parseInt(payloads[3], 10) || 0,\n              minute: parseInt(payloads[4], 10) || 0,\n              second: parseInt(payloads[5], 10) || 0,\n              millisecond: payloads[6] || 0\n            };\n          }\n        }\n      }\n\n      if (!_utils__WEBPACK_IMPORTED_MODULE_0__.default.hasKey(this.config, 'dateArgs')) {\n        throw 'Failed to set options for initializing object.';\n      } //console.log('!_:', ...keys.map(v => this.config.dateArgs[v]))\n      // Set date\n\n\n      var _zonedDt = _construct(Date, _toConsumableArray(keys.map(function (v) {\n        return _this.config.dateArgs[v];\n      }))),\n          _utcDt = new Date(Date.UTC.apply(Date, _toConsumableArray(keys.map(function (v) {\n        return _this.config.dateArgs[v];\n      })))),\n          _fixedDt = null;\n\n      if (this.config.dateArgs.year < 100) {\n        if (this.config.timezone === 'UTC') {\n          _fixedDt = new Date(_utcDt.setUTCFullYear(this.config.dateArgs.year));\n          this.config.offset = 0;\n        } else {\n          _fixedDt = new Date(_zonedDt.setFullYear(this.config.dateArgs.year));\n        }\n\n        this.baseDate = this.isValid(_fixedDt) ? _fixedDt : INVALID_DATE;\n      } else {\n        if (this.config.timezone === 'UTC') {\n          this.baseDate = _utcDt;\n          this.config.offset = 0;\n        } else {\n          this.baseDate = _zonedDt;\n        }\n      } //console.log('!!_:', _zonedDt, _utcDt, this.config.timezone, this.config.offset)\n\n      /*\r\n      if (this.isValid(_fixedDt)) {\r\n          if (this.config.timezone === 'UTC') {\r\n              // UTC datetime\r\n              _utcDt = new Date(_zonedDt.getTime() + this.config.offset)\r\n              console.log('!!!_:', _utcDt)\r\n              /*\r\n              _preDt = new Date(Date.UTC(_tmpDt.getFullYear(), _tmpDt.getMonth(), _tmpDt.getDate(), _tmpDt.getHours(), _tmpDt.getMinutes(), _tmpDt.getSeconds(), _tmpDt.getMilliseconds()))\r\n              if (this.config.dateArgs.year < 100) {\r\n                  _preDt = new Date(_preDt.setUTCFullYear(this.config.dateArgs.year))\r\n              }\r\n          console.log('!!!_:', _preDt)\r\n              this.baseDate = this.isValid(_preDt) ? _preDt : INVALID_DATE\r\n              * /\r\n              this.baseDate = _utcDt\r\n              this.config.offset = 0\r\n          } else {\r\n              // zoned datetime\r\n              this.baseDate = _zonedDt\r\n          }\r\n      } else {\r\n          this.baseDate = INVALID_DATE\r\n      }\r\n      */\n      //console.log(utils.cloneObject(this.config))\n\n    }\n    /**\r\n     * Initialize instance\r\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {\n      var instantLocale = 'en-US';\n      this.instance = this.isValid() ? Object.assign({}, {\n        year: parseInt(this.getLocaleDateElement('year', 'numeric', instantLocale), 10),\n        month: parseInt(this.getLocaleDateElement('month', 'numeric', instantLocale), 10),\n        monthLong: this.getLocaleDateElement('month', 'long', instantLocale),\n        monthShort: this.getLocaleDateElement('month', 'short', instantLocale),\n        week: this.getWeekOfYear(),\n        day: parseInt(this.getLocaleDateElement('day', 'numeric', instantLocale), 10),\n        weekday: this.getLocaleDateElement('weekday', 'long', instantLocale),\n        weekdayShort: this.getLocaleDateElement('weekday', 'short', instantLocale),\n        hour: parseInt(this.getLocaleDateElement('hour', {\n          hour12: false,\n          hour: 'numeric'\n        }, instantLocale), 10),\n        minute: parseInt(this.getLocaleDateElement('minute', 'numeric', instantLocale), 10),\n        second: parseInt(this.getLocaleDateElement('second', 'numeric', instantLocale), 10),\n        millisecond: this.config.timezone === 'UTC' ? this.baseDate.getUTCMilliseconds() : this.baseDate.getMilliseconds(),\n        timezone: this.config.timezone,\n        tzOffset: this.config.timezone === 'UTC' ? 0 : this.getTZOffset(),\n        unix: this.getUnixEpoch('s'),\n        unixms: this.getUnixEpoch('ms'),\n        era: this.getLocaleDateElement('era', 'long', instantLocale),\n        ce: this.getCEEpoch('s'),\n        cems: this.getCEEpoch('ms')\n      }) : null;\n    }\n    /**\r\n     * Calculate the UNIX epoch time for this date.\r\n     *\r\n     * @param {?string} unit [unit=ms] - `s` as second or `ms` as millisecond\r\n     */\n\n  }, {\n    key: \"getUnixEpoch\",\n    value: function getUnixEpoch() {\n      var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ms';\n\n      if (!unit) {\n        unit = /^sec(|onds)?$/i.test(this.config.epochUnit) ? 's' : 'ms';\n      }\n\n      var _time = this.baseDate.getTime(),\n          _tzos = this.getTZOffset();\n\n      if (this.config.timezone !== 'UTC' && _tzos != 0) {\n        _time = _time + _tzos;\n      }\n\n      return Math.floor(_time / (unit === 's' ? 1000 : 1));\n    }\n    /**\r\n     * Calculate the epoch time starting from the first year C.E. of this date.\r\n     *\r\n     * @param {?string} unit [unit=ms] - `s` as second or `ms` as millisecond\r\n     */\n\n  }, {\n    key: \"getCEEpoch\",\n    value: function getCEEpoch() {\n      var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ms';\n\n      if (!unit) {\n        unit = /^sec(|onds)?$/i.test(this.config.epochUnit) ? 's' : 'ms';\n      }\n\n      var _dt = this.baseDate,\n          _ceDt = new Date(Date.UTC(1, 0, 1, 0, 0, 0, 0)),\n          _ceEpoch = _ceDt.setUTCFullYear(1);\n\n      return Math.floor((_dt.getTime() + Math.abs(_ceEpoch)) / (unit === 's' ? 1000 : 1));\n    }\n    /**\r\n     * Returns a string with a language sensitive representation of the date portion of this date \r\n     * that depending on toLocaleDateString or toLocaleTimeString method.\r\n     *\r\n     * @param {string} elementName\r\n     * @param {?(string|object)} format\r\n     * @param {?string} locale\r\n     * @param {?string} timezone [timezone=UTC]\r\n     */\n\n  }, {\n    key: \"getLocaleDateElement\",\n    value: function getLocaleDateElement(elementName) {\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var timezone = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'UTC';\n\n      if (!locale) {\n        locale = this.config.locale;\n      }\n\n      var options = _utils__WEBPACK_IMPORTED_MODULE_0__.default.deepMerge(_utils__WEBPACK_IMPORTED_MODULE_0__.default.isObject(this.config.localeFormats.common) ? this.config.localeFormats.common : {}, {\n        locales: locale\n      }),\n          retval = null;\n\n      if (!format) {\n        //if (Object.prototype.hasOwnProperty.call(this.config.localeFormats, elementName)) {\n        if (_utils__WEBPACK_IMPORTED_MODULE_0__.default.hasKey(this.config.localeFormats, elementName)) {\n          options = _utils__WEBPACK_IMPORTED_MODULE_0__.default.deepMerge(options, _utils__WEBPACK_IMPORTED_MODULE_0__.default.isObject(this.config.localeFormats[elementName]) ? this.config.localeFormats[elementName] : _defineProperty({}, elementName, this.config.localeFormats[elementName]));\n        }\n      } else if (typeof format === 'string') {\n        options[elementName] = format;\n      } else if (_utils__WEBPACK_IMPORTED_MODULE_0__.default.isObject(format)) {\n        options = _utils__WEBPACK_IMPORTED_MODULE_0__.default.deepMerge(options, format);\n      }\n\n      if (timezone !== 'local') {\n        options.timeZone = timezone;\n      } //console.log('getLocaleDateElement::', elementName, utils.cloneObject(options))\n\n\n      switch (elementName) {\n        case 'year':\n          if (timezone === 'UTC' && this.baseDate.getUTCFullYear() == 0) {\n            retval = 0;\n          } else if (this.baseDate.getFullYear() == 0) {\n            retval = 0;\n          } else {\n            retval = this.baseDate.toLocaleDateString(locale, options);\n          }\n\n          break;\n\n        case 'month':\n        case 'day':\n        case 'weekday':\n        case 'era':\n          retval = this.baseDate.toLocaleDateString(locale, options);\n          break;\n\n        case 'hour':\n          retval = this.baseDate.toLocaleTimeString(locale, options);\n\n          if (_utils__WEBPACK_IMPORTED_MODULE_0__.default.hasKey(options, 'hour12') && !options.hour12) {\n            retval = _utils__WEBPACK_IMPORTED_MODULE_0__.default.hasKey(options, 'hourCycle') && options.hourCycle === 'h24' ? retval : retval == 24 ? 0 : retval;\n          }\n\n          break;\n\n        case 'minute':\n        case 'second':\n          retval = this.baseDate.toLocaleTimeString(locale, options);\n          break;\n\n        case 'week':\n        case 'millisecond':\n          retval = this.instance[elementName];\n          break;\n\n        default:\n          retval = null;\n          break;\n      } // Filtering\n\n\n      if (options[elementName] === '2-digit') {\n        return String(retval).length == 1 ? String(retval).padStart(2, '0') : retval;\n      } else if (elementName === 'millisecond' && options[elementName] === 'zerofill') {\n        return String(retval).length == 3 ? retval : String(retval).padStart(3, '0');\n      } else {\n        return !isNaN(retval) ? String(parseInt(retval, 10)) : retval;\n      }\n    }\n    /**\r\n     * Returns the instantiated date in a formatted format by PHP's date_format()-like formatter.\r\n     *\r\n     * @param {?string} formatter\r\n     * @param {?string} locale\r\n     */\n\n  }, {\n    key: \"format\",\n    value: function format() {\n      var formatter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (!locale) {\n        locale = this.config.locale;\n      }\n\n      var matcher = {\n        // Year\n        Y: this.getLocaleDateElement('year', 'numeric', locale),\n        y: this.getLocaleDateElement('year', '2-digit', locale),\n        L: this.getDaysInYear() == 366 ? 1 : 0,\n        // Month\n        F: this.getLocaleDateElement('month', 'long', locale),\n        m: this.getLocaleDateElement('month', '2-digit', locale),\n        M: this.getLocaleDateElement('month', 'short', locale),\n        n: this.getLocaleDateElement('month', 'numeric', locale),\n        t: this.getDaysInMonth(),\n        // Week\n        W: this.getWeekOfYear(),\n        // Day\n        d: this.getLocaleDateElement('day', '2-digit', locale),\n        j: this.getLocaleDateElement('day', 'numeric', locale),\n        z: this.getCumulativeDays(),\n        // Weekday\n        l: this.getLocaleDateElement('weekday', 'long', locale),\n        D: this.getLocaleDateElement('weekday', 'short', locale),\n        N: [7, 1, 2, 3, 4, 5, 6][this.instance.timezone === 'UTC' ? this.baseDate.getUTCDay() : this.baseDate.getDay()],\n        // ISO-8601 format numeric weekday: 1 (Monday) - 7 (Sunday)\n        w: this.instance.timezone === 'UTC' ? this.baseDate.getUTCDay() : this.baseDate.getDay(),\n        // numeric weekday: 0 (Sunday) - 6 (Saturday)\n        // Hour\n        a: this.getLocaleDateElement('hour', {\n          hour12: false,\n          hour: 'numeric'\n        }, locale) > 12 ? 1 : 0,\n        // in morning:0 or afternoon:1\n        g: parseInt(this.getLocaleDateElement('hour', {\n          hour12: true,\n          hour: 'numeric'\n        }, locale), 10),\n        G: this.getLocaleDateElement('hour', {\n          hour12: false,\n          hour: 'numeric'\n        }, locale),\n        h: String(parseInt(this.getLocaleDateElement('hour', {\n          hour12: true,\n          hour: '2-digit'\n        }, locale), 10)).padStart(2, '0'),\n        H: this.getLocaleDateElement('hour', {\n          hour12: false,\n          hour: '2-digit'\n        }, locale),\n        // Minute\n        I: this.getLocaleDateElement('minute', 'numeric', locale),\n        i: this.getLocaleDateElement('minute', '2-digit', locale),\n        // Second\n        S: this.getLocaleDateElement('second', 'numeric', locale),\n        s: this.getLocaleDateElement('second', '2-digit', locale),\n        // Millisecond\n        V: this.getLocaleDateElement('millisecond'),\n        v: this.getLocaleDateElement('millisecond', 'zerofill'),\n        // TimeZone\n        e: this.instance.timezone,\n        Z: this.instance.timezone === 'UTC' ? 0 : this.getTZOffset('s'),\n        // Full Datetime\n        c: this.instance.timezone === 'UTC' ? this.baseDate.toISOString().replace(/Z$/, '') : this.baseDate.toISOString(),\n        r: this.baseDate.toString(),\n        // RFC 2822 format date\n        U: this.getUnixEpoch('s'),\n        u: this.getUnixEpoch('ms'),\n        B: this.getCEEpoch('s'),\n        b: this.getCEEpoch('ms')\n      };\n      return _toConsumableArray(formatter).reduce(function (acc, cur, idx, src) {\n        if (Object.keys(matcher).includes(cur)) {\n          acc += matcher[cur];\n        } else if (/\\\\/.test(cur)) {\n          acc += src[idx + 1];\n          delete src[idx + 1];\n        } else {\n          acc += cur;\n        }\n\n        return acc;\n      }, '');\n    }\n    /**\r\n     * Get the UTC date from the local timezone date.\r\n     *\r\n     * @param {?object} date - must be the Date object if given\r\n     */\n\n  }, {\n    key: \"getUTC\",\n    value: function getUTC() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var _dt = date ? date : this.baseDate,\n          _y = _dt.getFullYear(),\n          _utc = new Date(Date.UTC(_y, _dt.getMonth(), _dt.getDate(), _dt.getHours(), _dt.getMinutes(), _dt.getSeconds(), _dt.getMilliseconds()));\n\n      if (_y < 100) {\n        _utc = new Date(_utc.setUTCFullYear(_y));\n      }\n\n      return _utc;\n    }\n    /**\r\n     * Get the time difference from the UTC date in the timezone of the current system.\r\n     *\r\n     * @param {?string} unit [unit=ms] - `s` as second or `ms` as millisecond\r\n     */\n\n  }, {\n    key: \"getTZOffset\",\n    value: function getTZOffset() {\n      var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ms';\n\n      var _utcDt = this.getUTC(),\n          offsetMS = this.baseDate.getTime() - _utcDt.getTime();\n\n      switch (true) {\n        case /^h(|ours?)$/i.test(unit):\n          return Math.round(offsetMS / MS_A_HOUR * 10) / 10;\n\n        case /^min(|utes?)$/i.test(unit):\n          return Math.floor(offsetMS / MS_A_MINUTE);\n\n        case /^sec(|onds?)$/i.test(unit):\n          return Math.floor(offsetMS / MS_A_SECOND);\n\n        default:\n          return offsetMS;\n      }\n    }\n    /**\r\n     * Calculates the date added or subtracted by the specified unit to the instantiated date.\r\n     *\r\n     * @param {number} payload - \r\n     * @param {string} unit\r\n     */\n\n  }, {\n    key: \"modify\",\n    value: function modify(payload, unit) {\n      payload = parseInt(payload, 10);\n\n      if (isNaN(payload) || typeof unit !== 'string' || !REGEX_UNITS.test(unit)) {\n        return false;\n      }\n\n      var _base = {\n        y: this.instance.year,\n        m: this.instance.month,\n        w: this.instance.week,\n        d: this.instance.day,\n        h: this.instance.hour,\n        mi: this.instance.minute,\n        s: this.instance.second,\n        ms: this.instance.millisecond,\n        tz: this.config.timezone\n      };\n\n      var _modDt = null,\n          _tmp;\n\n      switch (true) {\n        case /^years?$/i.test(unit):\n          _modDt = wrapper(_base.y + payload, _base.m, _base.d, _base.h, _base.mi, _base.s, _base.ms, _base.tz);\n          break;\n\n        case /^months?$/i.test(unit):\n          _modDt = wrapper(_base.y, _base.m + payload, _base.d, _base.h, _base.mi, _base.s, _base.ms, _base.tz);\n          break;\n\n        case /^weeks?$/i.test(unit):\n          _tmp = _base.d + payload * 7;\n\n          if (_tmp == 0) {\n            _modDt = wrapper(_base.y, _base.m, _base.d, _base.h - 24, _base.mi, _base.s, _base.ms, _base.tz);\n          } else {\n            _modDt = wrapper(_base.y, _base.m, _tmp, _base.h, _base.mi, _base.s, _base.ms, _base.tz);\n          }\n\n          break;\n\n        case /^days?$/i.test(unit):\n          _tmp = _base.d + payload;\n\n          if (_tmp == 0) {\n            _modDt = wrapper(_base.y, _base.m, _base.d, _base.h - 24, _base.mi, _base.s, _base.ms, _base.tz);\n          } else {\n            _modDt = wrapper(_base.y, _base.m, _tmp, _base.h, _base.mi, _base.s, _base.ms, _base.tz);\n          }\n\n          break;\n\n        case /^hours?$/i.test(unit):\n          _modDt = wrapper(_base.y, _base.m, _base.d, _base.h + payload, _base.mi, _base.s, _base.ms, _base.tz);\n          break;\n\n        case /^min(|utes?)$/i.test(unit):\n          _modDt = wrapper(_base.y, _base.m, _base.d, _base.h, _base.mi + payload, _base.s, _base.ms, _base.tz);\n          break;\n\n        case /^sec(|onds?)$/i.test(unit):\n          _modDt = wrapper(_base.y, _base.m, _base.d, _base.h, _base.mi, _base.s + payload, _base.ms, _base.tz);\n          break;\n\n        case /^m(s|illiseconds?)$/i.test(unit):\n          _modDt = wrapper(_base.y, _base.m, _base.d, _base.h, _base.mi, _base.s, _base.ms + payload, _base.tz);\n          break;\n      }\n\n      return _modDt.isValid() ? _modDt : INVALID_DATE;\n    }\n    /**\r\n     * Get calculated interval between the instantiated date and a specific date, with the \r\n     * specified unit.\r\n     *\r\n     * @param {string} compare\r\n     * @param {?string} unit\r\n     */\n\n  }, {\n    key: \"interval\",\n    value: function interval(compare) {\n      var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var compareObj = wrapper(compare);\n\n      if (compareObj === INVALID_DATE || !compareObj.isValid()) {\n        return false;\n      }\n\n      var diffMs = compareObj.instance.unixms - this.instance.unixms,\n          diffDays = Math.ceil(diffMs / MS_A_DAY);\n\n      switch (true) {\n        case /^years?$/i.test(unit):\n          if (Math.abs(diffDays) < MIN_YEAR_DAYS) {\n            return 0;\n          } else if (Math.abs(diffDays) > AVG_YEAR_DAYS) {\n            return Math.ceil(diffDays / AVG_YEAR_DAYS * 10) / 10;\n          } else {\n            return 1;\n          }\n\n        case /^months?$/i.test(unit):\n          if (Math.abs(diffDays) < MIN_MONTH_DAYS) {\n            return 0;\n          } else if (Math.abs(diffDays) > AVG_MONTH_DAYS) {\n            return Math.ceil(diffDays / AVG_MONTH_DAYS * 10) / 10;\n          } else {\n            return 1;\n          }\n\n        case /^weeks?$/i.test(unit):\n          return Math.ceil(diffMs / MS_A_WEEK * 10) / 10;\n\n        case /^days?$/i.test(unit):\n          return Math.ceil(diffMs / MS_A_DAY);\n\n        case /^hours?$/i.test(unit):\n          return Math.ceil(diffMs / MS_A_HOUR);\n\n        case /^min(|utes?)$/i.test(unit):\n          return Math.ceil(diffMs / MS_A_MINUTE);\n\n        case /^sec(|onds?)$/i.test(unit):\n          return Math.ceil(diffMs / MS_A_SECOND);\n\n        case /^m(s|illiseconds?)$/i.test(unit):\n        default:\n          if (Number.MAX_SAFE_INTEGER < diffMs) {\n            diffMs = BI(diffMs);\n          }\n\n          return diffMs;\n      }\n    }\n    /**\r\n     * Duplicate an instance of a Sunorhc object.\r\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      //return new Sunorhc(this.baseDate, this.config)\n      var datePayloads = [this.instance.year, this.instance.month, this.instance.week, this.instance.day, this.instance.hour, this.instance.minute, this.instance.second, this.instance.millisecond, this.config];\n      return wrapper.apply(void 0, datePayloads);\n    }\n    /**\r\n     * Determines if the Date object given in the argument is valid.\r\n     * Evaluates the instance's own date if there are no arguments or if the argument is not \r\n     * a date object.\r\n     *\r\n     * @param {?any} date \r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var chkDate = date ? date : this.baseDate;\n      return !(chkDate.toString() === INVALID_DATE);\n    }\n    /**\r\n     * The week number for the year is calculated.\r\n     *\r\n     * @param {?object} date - must be the Date object if given\r\n     */\n\n  }, {\n    key: \"getWeekOfYear\",\n    value: function getWeekOfYear() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var _dt = date ? date : this.baseDate,\n          firstDayOfYear = this.config.timezone === 'UTC' ? new Date(Date.UTC(_dt.getUTCFullYear(), 0, 1)) : new Date(_dt.getFullYear(), 0, 1);\n\n      if (_dt.getFullYear() < 100) {\n        firstDayOfYear = this.config.timezone === 'UTC' ? new Date(firstDayOfYear.setUTCFullYear(_dt.getUTCFullYear())) : new Date(firstDayOfYear.setFullYear(_dt.getFullYear()));\n      }\n\n      var dayOfYear = (_dt.getTime() - firstDayOfYear.getTime() + MS_A_DAY) / MS_A_DAY;\n      return Math.ceil(dayOfYear / 7);\n    }\n    /**\r\n     * The total number of days in the year on the instantiated date is calculated.\r\n     *\r\n     * @param {?object} date - must be the Date object if given\r\n     */\n\n  }, {\n    key: \"getDaysInYear\",\n    value: function getDaysInYear() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var _dt = date ? date : this.baseDate,\n          _y = this.config.timezone === 'UTC' ? _dt.getUTCFullYear() : _dt.getFullYear(),\n          isLeapYear = _y % 4 == 0;\n\n      return isLeapYear ? 366 : 365;\n    }\n    /**\r\n     * The total number of days in the month on the instantiated date is calculated.\r\n     *\r\n     * @param {?object} date - must be the Date object if given\r\n     */\n\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var _dt = date ? date : this.baseDate,\n          _y,\n          _m,\n          _nmDt,\n          _lmDt,\n          lastDay;\n\n      if (this.config.timezone === 'UTC') {\n        _y = _dt.getUTCFullYear();\n        _m = _dt.getUTCMonth();\n        _nmDt = new Date(Date.UTC(_y, _m + 1, 1, 0, 0, 0, 0));\n\n        if (_y < 100) {\n          _nmDt = new Date(_nmDt.setUTCFullYear(_y));\n        }\n\n        _lmDt = new Date(_nmDt.getTime() - 1);\n        lastDay = _lmDt.getUTCDate();\n      } else {\n        _y = _dt.getFullYear();\n        _m = _dt.getMonth();\n        _nmDt = new Date(_y, _m + 1, 1, 0, 0, 0, 0);\n\n        if (_y < 100) {\n          _nmDt = new Date(_nmDt.setFullYear(_y));\n        }\n\n        _lmDt = new Date(_nmDt.getTime() - 1);\n        lastDay = _lmDt.getDate();\n      }\n\n      return lastDay;\n    }\n    /**\r\n     * Get cumulative days in year untill current day from first day of year.\r\n     *\r\n     * @param {?object} date - must be the Date object if given\r\n     */\n\n  }, {\n    key: \"getCumulativeDays\",\n    value: function getCumulativeDays() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var _dt = date ? date : this.baseDate,\n          _y,\n          _fDt,\n          _diff;\n\n      if (this.config.timezone === 'UTC') {\n        _y = _dt.getUTCFullYear();\n        _fDt = new Date(Date.UTC(_y, 0, 1, 0, 0, 0, 0));\n\n        if (_y < 100) {\n          _fDt = new Date(_fDt.setUTCFullYear(_y));\n        }\n      } else {\n        _y = _dt.getFullYear();\n        _fDt = new Date(_y, 0, 1, 0, 0, 0, 0);\n\n        if (_y < 100) {\n          _fDt = new Date(_fDt.setFullYear(_y));\n        }\n      }\n\n      _diff = _dt.getTime() - _fDt.getTime();\n      return Math.floor(_diff / MS_A_DAY);\n    }\n    /**\r\n     * Getters\r\n     */\n\n  }, {\n    key: \"version\",\n    get: function get() {\n      return \"v\".concat(this.config.version);\n    }\n  }, {\n    key: \"instant\",\n    get: function get() {\n      return Object.assign({}, this.instance);\n    }\n  }, {\n    key: \"toDate\",\n    get: function get() {\n      return this.baseDate;\n    }\n  }, {\n    key: \"toISOString\",\n    get: function get() {\n      return this.baseDate.toISOString();\n    }\n  }, {\n    key: \"year\",\n    get: function get() {\n      return this.instance.year;\n    }\n  }, {\n    key: \"month\",\n    get: function get() {\n      return this.instance.month;\n    }\n  }, {\n    key: \"week\",\n    get: function get() {\n      return this.instance.week;\n    }\n  }, {\n    key: \"day\",\n    get: function get() {\n      return this.instance.day;\n    }\n  }, {\n    key: \"weekday\",\n    get: function get() {\n      return this.instance.weekday;\n    }\n  }, {\n    key: \"hour\",\n    get: function get() {\n      return this.instance.hour;\n    }\n  }, {\n    key: \"minute\",\n    get: function get() {\n      return this.instance.minute;\n    }\n  }, {\n    key: \"second\",\n    get: function get() {\n      return this.instance.second;\n    }\n  }, {\n    key: \"millisecond\",\n    get: function get() {\n      return this.instance.millisecond;\n    }\n  }, {\n    key: \"unix\",\n    get: function get() {\n      return /^(ms|milliseconds?)$/i.test(this.config.epochUnit) ? this.instance.unixms : this.instance.unix;\n    }\n  }, {\n    key: \"ce\",\n    get: function get() {\n      return /^(ms|milliseconds?)$/i.test(this.config.epochUnit) ? this.instance.cems : this.instance.ce;\n    }\n  }, {\n    key: \"tz\",\n    get: function get() {\n      return this.instance.timezone;\n    }\n  }, {\n    key: \"tzOffset\",\n    get: function get() {\n      return this.instance.tzOffset;\n    }\n  }]);\n\n  return Sunorhc;\n}();\n/*\r\nexport default function(...payloads) {\r\n    return new Sunorhc(...payloads)\r\n}\r\n*/\n\n/*\r\n~(() => {\r\n    if (!window.Sunorhc) window.Sunorhc = Sunorhc\r\n})()\r\n*/\n\n/*\r\n((root, factory) => {\r\n    console.log(root, factory)\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([], factory)\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory\r\n    } else {\r\n        root.Sunorhc = factory\r\n    }\r\n})(this, Sunorhc)\r\n*/\n\n\n\n\n//# sourceURL=webpack://Sunorhc/./src/index.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isObject = function isObject(one) {\n  return !!one && _typeof(one) === 'object' && !Array.isArray(one);\n};\n\nvar hasKey = function hasKey(obj, key) {\n  return !!obj && Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar cloneObject = function cloneObject(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nvar deepMerge = function deepMerge(target, source, opts) {\n  var isConcatArray = opts && opts.concatArray;\n  var result = Object.assign({}, target);\n\n  if (isObject(target) && isObject(source)) {\n    for (var _i = 0, _Object$entries = Object.entries(source); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          srcKey = _Object$entries$_i[0],\n          srcVal = _Object$entries$_i[1];\n\n      var targetVal = target[srcKey];\n\n      if (isConcatArray && Array.isArray(srcVal) && Array.isArray(targetVal)) {\n        result[srcKey] = targetVal.concat.apply(targetVal, _toConsumableArray(srcVal));\n      } else if (isObject(srcVal) && hasKey(target, srcKey)) {\n        result[srcKey] = deepMerge(targetVal, srcVal, opts);\n      } else {\n        Object.assign(result, _defineProperty({}, srcKey, srcVal));\n      }\n    }\n  }\n\n  return cloneObject(result);\n};\n\nvar mergeOptions = function mergeOptions(defaults, settings) {\n  var finalOpts = deepMerge({}, defaults);\n\n  if (isObject(defaults) && isObject(settings)) {\n    for (var _i2 = 0, _Object$entries2 = Object.entries(settings); _i2 < _Object$entries2.length; _i2++) {\n      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n          setKey = _Object$entries2$_i[0],\n          setVal = _Object$entries2$_i[1];\n\n      var allowKeys = Object.keys(defaults).concat('dateArgs', 'offset', 'tzName');\n\n      if (allowKeys.includes(setKey)) {\n        var defVal = finalOpts[setKey],\n            vType = _typeof(setVal);\n\n        switch (setKey) {\n          case 'timezone':\n            if (vType === 'string') {\n              finalOpts[setKey] = /^(UTC)$/i.test(setVal) ? 'UTC' : 'local';\n\n              if (!/^(UTC|local)$/i.test(setVal)) {\n                finalOpts.tzName = setVal;\n              }\n            }\n\n            break;\n\n          case 'firstArgument':\n            if (vType === 'string' && /^(epoch|year)$/i.test(setVal)) {\n              finalOpts[setKey] = setVal.toLowerCase();\n            }\n\n            break;\n\n          case 'locale':\n            if (vType === 'string') {\n              var _locale = new Intl.Locale(setVal);\n\n              finalOpts[setKey] = _locale.baseName;\n            }\n\n            break;\n\n          case 'epochUnit':\n            if (vType === 'string' && /^(sec|seconds?|ms|milliseconds?)$/i.test(setVal)) {\n              finalOpts[setKey] = setVal.toLowerCase();\n            }\n\n            break;\n\n          case 'localeFormats':\n            if (isObject(setVal)) {\n              var defKeys = Object.keys(defVal);\n\n              for (var _i3 = 0, _Object$entries3 = Object.entries(setVal); _i3 < _Object$entries3.length; _i3++) {\n                var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2),\n                    lfKey = _Object$entries3$_i[0],\n                    lfVal = _Object$entries3$_i[1];\n\n                if (defKeys.includes(lfKey)) {\n                  if (isObject(lfVal)) {\n                    finalOpts.localeFormats[lfKey] = deepMerge(defVal[lfKey], lfVal);\n                  } else if (typeof lfVal === 'string' && lfKey !== 'common') {\n                    finalOpts.localeFormats[lfKey] = _defineProperty({}, lfKey, lfVal);\n                  }\n                }\n              }\n            }\n\n            break;\n\n          default:\n            // Cannot be overwritten\n            break;\n        }\n      }\n    }\n  }\n\n  return finalOpts;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  isObject: isObject,\n  hasKey: hasKey,\n  cloneObject: cloneObject,\n  deepMerge: deepMerge,\n  mergeOptions: mergeOptions\n});\n\n//# sourceURL=webpack://Sunorhc/./src/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	__webpack_exports__ = __webpack_exports__.default;
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});